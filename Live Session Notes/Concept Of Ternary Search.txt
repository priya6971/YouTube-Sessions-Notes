Pre-requisite -> Binary Search
Application of Divide and Conquer
Condition -> Array must be sorted fashion 
(Two pathways ) : 
Left side of the mid value
Right side of the mid value

0	1	2	3	4
2	4	6	8	10

mid = 0 + (4-0) // 2 = 2
mid = left + right / 2 
mid = left + (right - left) // 2
Which one is the better approach to calculate the mid value in a binary search and why?
key = 4
if key < arr[mid]:
	right = mid - 1
if key > arr[mid]:
	left = mid + 1

Ternary Search -> dividing the array into three halves
mid1 = left + (right - left) // 3
mid2 = right - (right - left)//3
0	1	2	3	4
2	4	6	8	10
	mid1		mid2
left = 0, right = 4
mid1 = 0 + (4-0) // 3 => 1
mid2 = 4 - (4-0)//3 => 3
(left, mid1) - 1st half -> done
(mid1, mid2) - 2nd half -> done
(mid2, right) - 3rd half -> done

key = 6
if key == arr[mid1]:
	return mid1
elif key == arr[mid2]:
	return mid2
elif key < arr[mid1]:
	right = mid1-1
elif key > arr[mid2]:
	left = mid2 + 1
else:
	left = mid1 + 1
	right = mid2 - 1
	

	
	


