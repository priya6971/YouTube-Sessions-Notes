1. Sqrt(x)
// time complexity: O(log n)
// space complexity: O(1)

class Solution {
    public int mySqrt(int x) {
        if(x < 2){
            return x;
        }

        long num;
        int mid, left = 2, right = x/2;

        while(left <= right){
            mid = left + (right - left)/2;
            num = (long)mid * mid;

            if(num > x){
                // traverse towards left side of an array
                right = mid - 1;
            }
            else if(num < x){
                // traverse towards right side of an array
                left = mid + 1;
            }

            else{
                return mid;
            }
        }
        // we need to return lower bound of a given number
        return right;
    }
}

2. Missing Numbers

Approach 1: Sorting and checking out the missing number
time complexity: O(n log n)
space complexity: O(n)


Approach 2: XOR Operation 
time complexity: O(n)
space complexity: O(1)

class Solution {
    public int missingNumber(int[] nums) {
        int missingEle = nums.length;
        for(int i=0; i<nums.length; i++){
            missingEle ^= i^nums[i];
        }

        return missingEle;
    }
}

Approach 3: Gauss' Formula
time complexity: O(n)
space complexity: O(1)


class Solution {
    public int missingNumber(int[] nums) {
        int expectedSum = nums.length * (nums.length + 1)/2;
        int actualSum = 0;
        for(int num: nums){
            actualSum += num;
        }

        return expectedSum - actualSum;
    }
}