class Solution:
    # Right subtree - minimum value
    def successor(self, root):
        root = root.right
        while root.left is not None:
            root = root.left
        return root.val

    # Left subtree - maximum value
    def predecessor(self, root):
        root = root.left
        while root.right is not None:
            root = root.right
        return root.val

    def deleteNode(self, root, key):
        # Base case condition
        if root is None:
            return None

        # 1. Search the node to be deleted
        if key > root.val:
            # Traverse towards the right subtree
            root.right = self.deleteNode(root.right, key)
        elif key < root.val:
            # Traverse towards the left subtree
            root.left = self.deleteNode(root.left, key)
        else:
            # Case 1: Leaf Node
            if root.left is None and root.right is None:
                root = None
            # Case 2: Non-leaf node
            elif root.right is not None:
                root.val = self.successor(root)
                root.right = self.deleteNode(root.right, root.val)
            else:
                root.val = self.predecessor(root)
                root.left = self.deleteNode(root.left, root.val)

        return root